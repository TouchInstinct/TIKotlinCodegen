{{>licenseInfo}}

package {{packageName}}

import okhttp3.Interceptor
import okhttp3.Request
import okhttp3.Response
import retrofit2.Invocation
import java.io.IOException

class AuthorizationInterceptor : Interceptor {

    {{#authMethods}}
    {{#isBearer}}private var bearer: String? = null
    fun setBearerToken(bearer: String?) {
        this.bearer = bearer
    }
    {{/isBearer}}
{{#isBasic}}private var basic: String? = null
    fun setBasicToken(basic: String?) {
        this.basic = basic
    }
    {{/isBasic}}{{#isApiKey}}{{#isKeyInHeader}}private var {{vendorExtensions.x-security-name-param}}: String? = null
    fun set{{vendorExtensions.x-security-camel-case-name}}({{vendorExtensions.x-security-name-param}}: String?) {
        this.{{vendorExtensions.x-security-name-param}} = {{vendorExtensions.x-security-name-param}}
    }
        {{/isKeyInHeader}}{{/isApiKey}}

    {{/authMethods}}

    @Throws(IOException::class)
    override fun intercept(chain: Interceptor.Chain): Response {
        val request: Request = chain.request()
        val requestBuilder: Request.Builder = request.newBuilder()
        {{#authMethods}}{{#isApiKey}}{{#isKeyInHeader}}

        if (request.need{{vendorExtensions.x-security-camel-case-name}}Auth()) {
            requestBuilder.addHeader("{{keyParamName}}", {{vendorExtensions.x-security-name-param}})
        }{{/isKeyInHeader}}{{/isApiKey}}{{#isBasic}}
        if (request.needBasicAuth()) {
            requestBuilder.addHeader("Authorization", "Basic $basic")
        }{{/isBasic}}{{#isBearer}}
        if (request.needBearerAuth()) {
            requestBuilder.addHeader("Authorization", "Bearer $bearer")
        }{{/isBearer}}{{/authMethods}}

        return chain.proceed(requestBuilder.build())
    }
}

{{#authMethods}}{{#isApiKey}}{{#isKeyInHeader}}

fun Request.need{{vendorExtensions.x-security-camel-case-name}}Auth() = tag(Invocation::class.java)?.method()?.getAnnotation({{vendorExtensions.x-security-camel-case-name}}Auth::class.java) != null

@Retention(AnnotationRetention.RUNTIME)
@Target(AnnotationTarget.FUNCTION)
annotation class {{vendorExtensions.x-security-camel-case-name}}Auth()
{{/isKeyInHeader}}{{/isApiKey}}{{#isBasic}}

fun Request.needBasicAuth() = tag(Invocation::class.java)?.method()?.getAnnotation(BasicAuthRequest::class.java) != null

@Retention(AnnotationRetention.RUNTIME)
@Target(AnnotationTarget.FUNCTION)
annotation class BasicAuthRequest()
{{/isBasic}}{{#isBearer}}

fun Request.needBearerAuth() = tag(Invocation::class.java)?.method()?.getAnnotation(BearerAuthRequest::class.java) != null

@Retention(AnnotationRetention.RUNTIME)
@Target(AnnotationTarget.FUNCTION)
annotation class BearerAuthRequest()
{{/isBearer}}{{/authMethods}}
