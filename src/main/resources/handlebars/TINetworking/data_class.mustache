/**
* {{{description}}}
{{#allVars}}
    * @param {{name}} {{{description}}}
{{/allVars}}
*/
@JsonClass(generateAdapter = true)
{{#hasVars}}data {{/hasVars}}class {{classname}} (
{{#allVars}}
    {{#required}}{{>data_class_req_var}}{{^@last}},{{/@last}}{{/required}}{{^required}}{{>data_class_opt_var}}{{^@last}},{{/@last}}{{/required}}
{{/allVars}}
) {
{{#allVars}}
    {{#isEnum}}
        /**
        * {{{description}}}
        * Values: {{#allowableValues}}{{#enumVars}}{{&name}}{{^@last}},{{/@last}}{{/enumVars}}{{/allowableValues}}
        */
    enum class {{nameInCamelCase}}(val value: {{datatype}}{{#isNullable}}?{{/isNullable}}) {
    {{#allowableValues}}{{#enumVars}}
        {{&name}}({{#value}}{{{value}}}{{/value}}{{^value}}null{{/value}}){{^@last}},{{/@last}}{{#@last}};{{/@last}}
    {{/enumVars}}{{/allowableValues}}

        class JsonAdapter {
            @ToJson
            fun toJson(value: {{nameInCamelCase}}?): String? = value?.value

            @FromJson
            fun fromJson(value: String): {{nameInCamelCase}}? = values()
                    .find { type -> type.value == value }
        }

    }
    {{/isEnum}}
{{/allVars}}
}