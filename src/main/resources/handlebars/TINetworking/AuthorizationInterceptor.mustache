{{>licenseInfo}}

package {{packageName}}

import okhttp3.Interceptor
import okhttp3.Request
import okhttp3.Response
import retrofit2.Invocation
import java.io.IOException

class AuthorizationInterceptor : Interceptor {

    private var sessionToken: String? = null

    fun setSessionToken(sessionToken: String?) {
        this.sessionToken = sessionToken
    }

    @Throws(IOException::class)
    override fun intercept(chain: Interceptor.Chain): Response {
        val request: Request = chain.request()
        val requestBuilder: Request.Builder = request.newBuilder()

        if (request.needAuth()) {
        {{#authMethods}}
            {{#isApiKey}}{{#isKeyInHeader}}requestBuilder.addHeader("{{keyParamName}}", sessionToken){{/isKeyInHeader}}{{/isApiKey}}
        {{/authMethods}}
        }

        return chain.proceed(requestBuilder.build())
    }
}

fun Request.needAuth() = tag(Invocation::class.java)?.method()?.getAnnotation(AuthRequest::class.java) != null

@Retention(AnnotationRetention.RUNTIME)
@Target(AnnotationTarget.FUNCTION)
annotation class AuthRequest()
